// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func NavHighlighter() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"visibleNavHighlighter\" x-on:scroll.window.throttle.50ms=\"onScroll()\"><span x-show=\"headings.length &gt; 0\" class=\"mb-2 block text-sm font-semibold uppercase tracking-wider text-gray-300\">On this page</span><ul class=\"space-y-3\"><template x-for=\"heading in headings\"><li class=\"text-sm text-gray-500\" :class=\"if (heading.tagName.toLowerCase() === &#39;h3&#39;) { return &#39;ml-4&#39; } else if (heading.tagName.toLowerCase() === &#39;h4&#39;) { return &#39;ml-8&#39; }\"><a :href=\"&#39;#&#39;+heading.id\" class=\"hover:text-gray-300 dark:hover:text-gray-600\" :class=\"visibleHeadingId == heading.id &amp;&amp; &#39;font-medium text-black dark:text-white&#39;\" x-text=\"heading.innerText\"></a></li></template></ul></div><script>\n        document.addEventListener('alpine:initializing', () => {\n            Alpine.data('visibleNavHighlighter', () => ({\n                headings: undefined,\n                visibleHeadingId: null,\n\n                init() {\n                    // Grab all the headings inside the main container.\n                    this.headings = document.querySelectorAll('[listen-for-intersection-of-titles] h2:not([no-sidebar]), [listen-for-intersection-of-titles] h3:not([no-sidebar]), [listen-for-intersection-of-titles] h4:not([no-sidebar])')\n\n                    this.assignHeadingIds()\n\n                    this.onScroll()\n                },\n\n                assignHeadingIds() {\n                    // If a heading doesn't have an [id], we'll give it one\n                    // based on its text content.\n                    this.headings.forEach(heading => {\n                        if (heading.id) return\n\n                        heading.id = heading.textContent.replace(/\\s+/g, '-').toLowerCase()\n                    })\n                },\n\n                onScroll() {\n                    // We're gonna highlight the first heading above an imaginary\n                    // drawn horizontally across the center of the screen.\n\n                    // Get the distance from the top of that line.\n                    let relativeTop = window.innerHeight / 2\n\n                    let headingsByDistanceFromTop = {}\n\n                    // Populate an object of headings by their distance from our\n                    // imaginary lines as the keys.\n                    this.headings.forEach(heading => {\n                        headingsByDistanceFromTop[heading.getBoundingClientRect().top - relativeTop] = heading\n                    })\n\n                    // Grab the first one that is above that line.\n                    let closestNegativeTop = Math.max(...Object.keys(headingsByDistanceFromTop).filter(top => top < 0))\n\n                    // If we couldn't find one, don't highlight anything.\n                    if (closestNegativeTop >= 0 || [Infinity, NaN, -Infinity].includes(closestNegativeTop)) return this.visibleHeadingId = null\n\n                    // Otherwise, highlight that heading.\n                    this.visibleHeadingId = headingsByDistanceFromTop[closestNegativeTop].id\n                },\n            }))\n        })\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
