package components

templ NavHighlighter() {
	<div
		x-data="visibleNavHighlighter"
		x-on:scroll.window.throttle.50ms="onScroll()"
	>
		<span x-show="headings.length > 0" class="mb-2 block text-sm font-semibold uppercase tracking-wider text-gray-300">On this page</span>
		<ul class="space-y-3">
			<template x-for="heading in headings">
				<li class="text-sm text-gray-500" :class="if (heading.tagName.toLowerCase() === 'h3') { return 'ml-4' } else if (heading.tagName.toLowerCase() === 'h4') { return 'ml-8' }">
					<a :href="'#'+heading.id" class="hover:text-gray-300 dark:hover:text-gray-600" :class="visibleHeadingId == heading.id && 'font-medium text-black dark:text-white'" x-text="heading.innerText"></a>
				</li>
			</template>
		</ul>
	</div>
	<script>
        document.addEventListener('alpine:initializing', () => {
            Alpine.data('visibleNavHighlighter', () => ({
                headings: undefined,
                visibleHeadingId: null,

                init() {
                    // Grab all the headings inside the main container.
                    this.headings = document.querySelectorAll('[listen-for-intersection-of-titles] h2:not([no-sidebar]), [listen-for-intersection-of-titles] h3:not([no-sidebar]), [listen-for-intersection-of-titles] h4:not([no-sidebar])')

                    this.assignHeadingIds()

                    this.onScroll()
                },

                assignHeadingIds() {
                    // If a heading doesn't have an [id], we'll give it one
                    // based on its text content.
                    this.headings.forEach(heading => {
                        if (heading.id) return

                        heading.id = heading.textContent.replace(/\s+/g, '-').toLowerCase()
                    })
                },

                onScroll() {
                    // We're gonna highlight the first heading above an imaginary
                    // drawn horizontally across the center of the screen.

                    // Get the distance from the top of that line.
                    let relativeTop = window.innerHeight / 2

                    let headingsByDistanceFromTop = {}

                    // Populate an object of headings by their distance from our
                    // imaginary lines as the keys.
                    this.headings.forEach(heading => {
                        headingsByDistanceFromTop[heading.getBoundingClientRect().top - relativeTop] = heading
                    })

                    // Grab the first one that is above that line.
                    let closestNegativeTop = Math.max(...Object.keys(headingsByDistanceFromTop).filter(top => top < 0))

                    // If we couldn't find one, don't highlight anything.
                    if (closestNegativeTop >= 0 || [Infinity, NaN, -Infinity].includes(closestNegativeTop)) return this.visibleHeadingId = null

                    // Otherwise, highlight that heading.
                    this.visibleHeadingId = headingsByDistanceFromTop[closestNegativeTop].id
                },
            }))
        })
    </script>
}
