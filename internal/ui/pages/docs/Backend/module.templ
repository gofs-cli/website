package backend

import . "github.com/gofs-cli/website/internal/ui/components"

templ Module() {
	<div class="flex flex-col gap-y-2">
		<h1 class="mb-4 text-4xl font-extrabold">Adding a Backend Module</h1>
		<h2 class="mt-2 text-2xl font-extrabold">The internal/app folder</h2>
		<p class="para">
			Backend modules are located in the <code>/internal/app</code> folder.
		</p>
		@CodeBlock(NoClipboard, `root
|--internal
|  |--app
|     |--[module 1]
|     |--[module 2]
|     |--[...]
`)
		<p class="para">
			Each backend module should have its own folder which
			should contain the exposed API and all the code for the module's 
			internal workings. 
		</p>
		<h2 class="mt-2 text-2xl font-extrabold">Example</h2>
		<p class="para">
			Lets create a simple todo list app called mytodo. Start by initializing a new project.
		</p>
		@Cmdline("gofs init github.com/myorg/mytodo mytodo")
		<p class="para">
			Now lets create a backend module called <code>list</code> that will contain all the business
			logic and database logic for the todo list. Lets also say todo lists may not contain more
			than 20 items because that's just too much to do.
		</p>
		<h3 class="text-2xl font-extrabold">Create the list module folder</h3>
		<p class="para">
			Create a folder for the list module.
		</p>
		@CodeBlock(NoClipboard, `mytodo
|--internal
|  |--app
|     |--list
`)
		<h3 class="text-2xl font-extrabold">Create the list api</h3>
		<p class="para">
			Create a new file <code>/internal/app/list/list.go</code> with the <code>List</code> struct
			and functions for creating a new todo list and adding items to the list.
			NB: This code is incomplete, you need to add the database code from 
			<a class="link" href="/docs/backend/persistence">Persisting data</a> before it will compile.
			@CodeBlock(NoClipboard, `mytodo
|--internal
|  |--app
|     |--list
|        |--list.go
`)
			@CodeBlock(Clipboard, `package list

import (
	"github.com/google/uuid"
)

const MaxItems = 20

type List struct {
	ID    string
	Name  string
	Items []string
}

func NewList(name string) (*List, error) {
	l := &List{
		ID:   uuid.NewString(),
		Name: name,
	}

	// Save list to database
	if err != nil {
		return nil, err
	}

	return l, nil
}

func AddItem(listID string, item string) error {
	l, err := // Retrieve list from the database
	if err != nil {
		return err
	}

	// Check if the list is full
	if len(l.Items) >= MaxItems {
		return fmt.Errorf("Todo list is full")
	}

	l.Items = append(l.Items, item)

	// save to the database
	if err != nil {
		return err
	}

	return nil
}
`)
		</p>
	</div>
}
