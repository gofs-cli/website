// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package backend

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import . "github.com/gofs-cli/website/internal/ui/components"

func Codegen() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"flex flex-col gap-y-2\"><h1 class=\"mb-4 text-4xl font-extrabold\">Codegen</h1><p class=\"para\">Gofs can generate the database CRUD functions and sql using go templates. This requires gofs annotations on the struct fields and the struct itself.</p><h2 class=\"mt-2 text-2xl font-extrabold\">Annotations</h2><p class=\"para\">Lets prepare <code>List</code> for code generation. The annotation above the struct tell gofs to generate the db helper functions and database create schema for List. The field annotations tell gofs that ID is the primary key and Name is searchable. These fields will use the relational model and be created as fields. All fields can be accessed from the json serialized blob. </p>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = CodeBlock(Clipboard, `//go:generate gofs codegen db sql
type List struct {
	ID    string    `+"`"+`json:"id"   gofs:"pk"`+"`"+`
	Name  string    `+"`"+`json:"name" gofs:"searchable"`+"`"+`
	Items []string  `+"`"+`json:"items"`+"`"+`
}
`).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<p class=\"para\">Running codegen will create files with the suffix <code>_generated</code>,  specifically <code>/internal/app/list/list_db_generated.go</code> with helper functions for the database CRUD operations, and <code>/internal/db/migrations/lists_generated.sql</code>. In the mytodo example, once these generated files are created, you will need to remove the hand written code added in the persistence section.")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = CodeBlock(NoClipboard, `mytodo
|--internal
|  |--app
|  |  |--list
|  |     |--list.go
|  |     |--list_db_generated.go
|  |--db
|     |--migrations
|        |--lists_generated.sql

`).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</p><h2 class=\"mt-2 text-2xl font-extrabold\">Gofs templates</h2><p class=\"para\">Gofs templates can be found in the <code>.gofs/templates</code> folder. You can modify these templates to suit your needs. You can also add new templates and use them to generate your app specific code.</p></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
