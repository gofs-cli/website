// Code generated by gofs codegen. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

func get{{.StructName}}By{{range .PkFields}}{{.FieldName}}{{end}}(ctx context.Context, tx *sql.Tx{{range .PkFields}}, {{.FieldName}} {{.FieldType}}{{end}}) (*{{.StructName}}, error) {
	var data []byte
	err := tx.QueryRowContext(ctx, "SELECT blob FROM {{.StructName | Snake}}s WHERE {{range .PkFields}}{{.FieldName | Snake}} = ${{Add .FieldNumber 1}}{{end}}",{{range .PkFields}}{{.FieldName}}{{end}}).Scan(&data)
	if err != nil {
		return nil, err
	}
	var v {{.StructName}}
	return &v, json.Unmarshal(data, &v)
}

func create{{.StructName}}(ctx context.Context, tx *sql.Tx, v *{{.StructName}}) error {
	jsonb, err := json.Marshal(&v)
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "INSERT INTO {{.StructName | Snake}}s (last_updated, blob{{range .GofsFields}}, {{.FieldName | Snake}}{{end}}) VALUES ($1, $2{{range .GofsFields}}, ${{Add .FieldNumber 3}}{{end}})",
		time.Now().UTC(), jsonb{{range .GofsFields}}, v.{{.FieldName}}{{end}})
	return err
}

func update{{.StructName}}(ctx context.Context, tx *sql.Tx, v *{{.StructName}}) error {
	jsonb, err := json.Marshal(&v)
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "UPDATE {{.StructName | Snake}}s SET last_updated = $1, blob = $2{{range .SearchableFields}}, {{.FieldName | Snake}} = ${{Add .FieldNumber 3}}{{end}} WHERE {{ $length := len .SearchableFields }}{{range .PkFields}}{{.FieldName | Snake}} = ${{Add $length 3}}{{end}}",
		time.Now().UTC(), jsonb{{range .SearchableFields}}, v.{{.FieldName}}{{end}}{{range .PkFields}}, v.{{.FieldName}}{{end}})
	return err
}	

func delete{{.StructName}}(ctx context.Context, tx *sql.Tx, v *{{.StructName}}) error {
	_, err := tx.ExecContext(ctx, "DELETE FROM {{.StructName | Snake}}s WHERE {{range .PkFields}}{{.FieldName | Snake}} = ${{Add .FieldNumber 1}}{{end}}",
		{{range .PkFields}}v.{{.FieldName}}{{end}})
	return err
}	

{{range .SearchableFields}}
func get{{.StructName}}sBy{{.FieldName}}(ctx context.Context, tx *sql.Tx, {{.FieldName}} {{.FieldType}}) ([]{{.StructName}}, error) {
	rows, err := tx.QueryContext(ctx, "SELECT blob FROM {{.StructName | Snake}}s WHERE {{.FieldName | Snake}} = $1 LIMIT 5000",
		{{.FieldName}})
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	vs := []{{.StructName}}{}
	for rows.Next() {
		var data []byte
		if err = rows.Scan(&data); err != nil {
			return nil, err
		}
		var v {{.StructName}}
		if err = json.Unmarshal(data, &v); err != nil {
			return nil, err
		}
		vs = append(vs, v)
	}
	return vs, nil
}
{{end}}
